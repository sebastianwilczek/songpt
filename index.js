const { getSpotifyAccessToken, getSpotifyAccountAccessToken, getSpotifyTrackForTitle, createSpotifyPlaylist, searchSpotifyTracks } = require("./src/spotify.js");
const { generateSuggestionsBasedOnSongs, generateSuggestionsBasedOnKeywords } = require("./src/openai.js");

/**
 * Creates a new playlist in the Spotify account belonging to the given Spotify refresh token.
 * Songs are added based on the song and artist titles provided.
 * Spotify is queried for the track IDs of the songs, and then the playlist is created.
 * @param {string} spotifyCredentials The Spotify Basic credentials to use.
 * @param {string} spotifyRefreshToken The Spotify refresh token to use. Playlists will be created on the account associated with this token.
 * @param {string} spotifyAccountId The Spotify account ID to create the playlist for. Must match the account associated with the refresh token.
 * @param {string} playlistName The name of the playlist to create.
 * @param {string} playlistDescription The description of the playlist to create.
 * @param {Array} suggestions The track suggestions to be added to the playlist.
 * @return {Promise} The Spotify playlist ID.
 */
const generatePlaylist = async (spotifyCredentials, spotifyRefreshToken, spotifyAccountId, playlistName, playlistDescription, suggestions) => {
  const spotifyAccessToken = await getSpotifyAccessToken(spotifyCredentials);
  const searchResults = await Promise.all(suggestions.map(async (suggestion) => (await getSpotifyTrackForTitle(suggestion, spotifyAccessToken))));
  const trackIds = searchResults.map((searchResult) => searchResult?.id).filter((id) => id);

  const spotifyAccountAccessToken = await getSpotifyAccountAccessToken(spotifyCredentials, spotifyRefreshToken);

  const playlistId = await createSpotifyPlaylist(playlistName, playlistDescription, trackIds, false, spotifyAccountId, spotifyAccountAccessToken);
  return playlistId;
};

/**
 * Creates a new playlist in the Spotify account belonging to the given Spotify refresh token.
 * Songs are added based on suggestions generated by OpenAI's API, based on the given song titles.
 * @param {string} openAiApiKey The OpenAI API key to use.
 * @param {string} spotifyCredentials The Spotify Basic credentials to use.
 * @param {string} spotifyRefreshToken The Spotify refresh token to use. Playlists will be created on the account associated with this token.
 * @param {string} spotifyAccountId The Spotify account ID to create the playlist for. Must match the account associated with the refresh token.
 * @param {string} playlistName The name of the playlist to create.
 * @param {string} playlistDescription The description of the playlist to create.
 * @param {string[]} songTitles The song titles to base the playlist on.
 * @return {Promise} The Spotify playlist ID.
 */
const generatePlaylistBasedOnSongs = async (openAiApiKey, spotifyCredentials, spotifyRefreshToken, spotifyAccountId, playlistName, playlistDescription, songTitles) => {
  const suggestions = await generateSuggestionsBasedOnSongs(
    openAiApiKey,
    songTitles
  );

  return generatePlaylist(spotifyCredentials, spotifyRefreshToken, spotifyAccountId, playlistName, playlistDescription, suggestions);
};

/**
 * Creates a new playlist in the Spotify account belonging to the given Spotify refresh token.
 * Songs are added based on suggestions generated by OpenAI's API, based on the given keywords.
 * @param {string} openAiApiKey The OpenAI API key to use.
 * @param {string} spotifyCredentials The Spotify Basic credentials to use.
 * @param {string} spotifyRefreshToken The Spotify refresh token to use. Playlists will be created on the account associated with this token.
 * @param {string} spotifyAccountId The Spotify account ID to create the playlist for. Must match the account associated with the refresh token.
 * @param {string} playlistName The name of the playlist to create.
 * @param {string} playlistDescription The description of the playlist to create.
 * @param {string} keywords The keywords to base the playlist on.
 * @return {Promise} The Spotify playlist ID.
 */
const generatePlaylistBasedOnKeywords = async (openAiApiKey, spotifyCredentials, spotifyRefreshToken, spotifyAccountId, playlistName, playlistDescription, keywords) => {
  const suggestions = await generateSuggestionsBasedOnKeywords(
    openAiApiKey,
    keywords
  );

  return generatePlaylist(spotifyCredentials, spotifyRefreshToken, spotifyAccountId, playlistName, playlistDescription, suggestions);
};

exports.generatePlaylistBasedOnSongs = generatePlaylistBasedOnSongs;
exports.generatePlaylistBasedOnKeywords = generatePlaylistBasedOnKeywords;
exports.generateSuggestionsBasedOnSongs = generateSuggestionsBasedOnSongs;
exports.generateSuggestionsBasedOnKeywords = generateSuggestionsBasedOnKeywords;
exports.getSpotifyAccessToken = getSpotifyAccessToken;
exports.getSpotifyAccountAccessToken = getSpotifyAccountAccessToken;
exports.getSpotifyTrackForTitle = getSpotifyTrackForTitle;
exports.createSpotifyPlaylist = createSpotifyPlaylist;
exports.searchSpotifyTracks = searchSpotifyTracks;
